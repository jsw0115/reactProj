plugins {
	id 'java'
//	id 'org.springframework.boot' version '3.1.0'  // 안정적인 버전 사용
//	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.springframework.boot' version '2.7.7'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.spring'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
	targetCompatibility = '11'

	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// Spring Boot 관련 의존성
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// Lombok 설정
	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'

	// 개발용 의존성
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// 데이터베이스 관련 의존성
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'mysql:mysql-connector-java:8.0.33'
	implementation 'org.postgresql:postgresql:42.2.19'


	// MyBatis 의존성
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'

	// 추가 의존성
	implementation 'org.springframework.mobile:spring-mobile-device:1.1.3.RELEASE'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.1'

	// Logback 제거 및 Log4j2로 변경
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// Log4j2 설정
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'

	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Redis 의존성 추가 (필요시)
	/*
	implementation ('it.ozimov:embedded-redis:0.7.3') {
		exclude group: "org.slf4j", module: "slf4j-simple"
	}
	*/

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'log4j', name: 'log4j', version: '1.2.16'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// 2024.10.15 스프링 시큐리티
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
}


tasks.named('test') {
	useJUnitPlatform()
}

/* 2024.10.12 build.gradle 개발환경, 배포환경 맞추기 */

def frontendDir = "$projectDir/src/main/frontend"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install' }
	else {
		commandLine "npm", "audit", "fix" commandLine 'npm', 'install'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build"
	} else {
		commandLine "npm", "run-script", "build"
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}